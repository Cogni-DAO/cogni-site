{
    "type": "Task",
    "status": "todo",
    "project": "CogniMemorySystem-POC",
    "name": "Migrate Front-End from Vite to Next.js (SSR Ready)",
    "description": "Switch the React front-end to Next.js 14 (app router) to enable built-in API routes, SSR, and routing. This will make integrating the legacy chat API handler trivial and set us up for future server-rendered features.",
    "implementation_details": {
        "target_files": [
            "package.json",
            "vite.config.ts (delete)",
            "src/main.tsx (delete)",
            "index.html (delete)",
            "tsconfig.json",
            "tsconfig.app.json (delete) ",
            "tsconfig.node.json (delete)",
            "next.config.js (new)",
            "postcss.config.js",
            "tailwind.config.ts",
            "src/pages/* -> pages/*.tsx (move/rename)",
            "src/components/**/* (retain)",
            "pages/_app.tsx (new)",
            "pages/_document.tsx (new optional)",
            "app/api/ai/chat/route.ts (move intact from copied repo)",
            "src/lib/utils.ts (keep)",
            "src/styles/globals.css (new)"
        ]
    },
    "action_items": [
        "[x] Install Next.js + peer deps: next, react, react-dom installed.",
        "[x] Replace dev scripts in package.json with Next.js scripts.",
        "[x] Delete vite.config.ts and index.html; Vite entry removed (main.tsx).",
        "[x] Remove React Router: <BrowserRouter> removed, all relevant pages/components converted to Next.js routing, and react-router-dom uninstalled.",
        "[x] Main pages (Index, NodePage, GraphView, Explore) migrated to Next.js structure and routing.",
        "[x] Create pages/_app.tsx with providers and global CSS.",
        "[x] Configure Tailwind for Next: content paths in tailwind.config.ts updated for src/ and app/ directories.",
        "[x] Update tsconfig paths alias (\\\"@/*\\\") and add `baseUrl` of `.`.",
        "[ ] Add next.config.js with `compiler.styledComponents` or any needed options; configure `webpack` alias if cva utils path remains.",
        "[x] Verify lint + typecheck passes: `next lint` runs and `next build` completes successfully.",
        "[x] Configure `next lint`: .eslintrc.json created with Next.js ESLint plugin.",
        "[ ] Fix default 404 page - currently using a standard Next.js 404 page.",
        "[ ] Update README with new dev commands.",
        "[ ] Replace <img> with `next/image` if any assets are present.",
        "[ ] Test custom font rendering under Next.js font optimization pipeline (e.g., Google Fonts, local fonts).",
        "[~] Decision on pages/ vs app/ router made for short-term (hybrid); documentation pending."
    ],
    "test_criteria": [
        "[ ] `next dev` launches site on localhost:3000 with all routes rendering successfully.",
        "[ ] SSR pages load via View Source (html rendered).",
        "[ ] Chat works end-to-end via `/api/ai/chat` route.",
        "[ ] No remaining imports from `react-router-dom` or Vite packages.",
        "[ ] `next build` completes with zero TypeScript errors.",
        "[ ] Lighthouse basic score not significantly regressed.",
        "[ ] Storybook (if later added) still compiles.",
        "[ ] Project page (`/graph` or `/explore`) fetches and renders initial data server-side (confirm via network tab or View Source)."
    ],
    "success_criteria": [
        "[ ] Production build served by `next start` is functional.",
        "[ ] Chat API route requires no additional server for deployment (handled by Next).",
        "[ ] Tailwind styles and shadcn components render correctly.",
        "[ ] Project CI pipeline updated & green (build/lint/test)."
    ],
    "current_status": "Phase 1 done: Next.js dev server runs, home page SSR returns 200. Header/Footer/related components migrated to next/link. Remaining tasks: port other pages, strip react-router-dom, cleanup Vite deps, complete Tailwind path update, etc.",
    "note": "We're starting with classic `pages/` routing for clarity, while using App Router for API routes. This hybrid keeps migration simple now and leaves an easy path to full `app/` migration later."
}