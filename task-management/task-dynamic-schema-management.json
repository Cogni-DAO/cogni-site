{
  "type": "Task",
  "status": "in-progress",
  "project": "DynamicBlockRenderers",
  "name": "orval + zod client + typed renderer pipeline",
  "description": "Replace hand-written fetch helpers with orval-generated hooks & zod validation. Auto-generate block render stubs and scaffold real props types based on backend schemas.",
  "action_items": [
    "## 🔌  ORVAL CLIENT",
    "[x] Install deps ➜ `npm i -D orval zod openapi-typescript`",
    "[x] orval.config.js ➜ uses `client: 'fetch-zod'`, outputs to `src/api`, emits zod schemas",
    "[x] `package.json` ➜ `{ \"gen:api\": \"orval\", \"gen:renderers\": \"ts-node scripts/gen-renderers.ts\" }`",
    "## 🖼️  RENDERER STUB GENERATOR",
    "[x] `scripts/gen-renderers.ts` ➜ Reads local or remote `/schemas/index.json`, generates `{type}.v{version}.tsx` stubs",
    "[x] `blockRendererRegistry.ts` ➜ Maps `{type}_v{version}` → dynamic import using manifest",
    "[x] `blockRendererRegistry.data.ts` ➜ Auto-generated from renderers for static mapping",
    "## 🔁 ZOD-INFERRED TYPES",
    "[ ] **Infer schema types** ➜ Use Zod's `.infer<typeof ZodSchema>` in generated stubs: each stub imports its zod schema from `src/api/schemas` and defines correct props",
    "[ ] **Typed stubs** ➜ Replace `data: any` with the inferred type from `zod`, and pass it into the component props",
    "[ ] **Shared base props** ➜ Create `BaseBlockRendererProps` for `blockId`, `blockType`, `blockVersion`, etc., and extend it in each typed renderer",
    "## ✅ FIRST WORKING RENDERER",
    "[ ] **Implement `Task.v2.tsx`** ➜ Replace stub with a basic rendering of fields like `name`, `status`, and `description`, typed via `Zod.infer`",
    "## 🧹 REMOVE AJV",
    "[x] Deleted `src/lib/ajv.ts`, replaced with orval/zod validation",
    "## 🔄 PIPELINE",
    "[ ] CI ➜ Ensure `npm run gen:api && gen:renderers` runs after `backend/export_openapi.py`. Fail CI if `git diff --exit-code schemas/ src/api/` is non-zero",
    "## 🛠️  CODE MOD",
    "[ ] Replace manual `fetchBlocks()` and `createChatRequest()` with generated hooks from `src/api/chat` and `src/api/blocks`",
    "## 📋 METADATA TYPINGS",
    "[ ] Extend `scripts/gen-renderers.ts` or create `gen-metadata-models.ts` to fetch each `/schemas/{type}/latest` entry",
    "[ ] Convert each JSON Schema to `.zod.ts` and `.d.ts` type via `json-schema-to-zod` or `quicktype`",
    "[ ] Write output to `src/lib/block_metadata/{type}.ts`",
    "[ ] Refactor renderer stubs to use `props.data: ProjectMetadata`, etc.",
    "[ ] Optionally create a `BlockMetadataByType` type map for future narrowing"
  ],
  "success_criteria": [
    "• `Doc.v3.tsx`, `Task.v2.tsx`, etc. include real typed props based on zod schemas",
    "• `Task.v2` renders actual block metadata (not just JSON dump)",
    "• `UnknownBlockRenderer` only appears for types not in schema index",
    "• CI fails on schema/render drift",
    "• All Ajv validation fully removed",
    "• Frontend has real TS types for `ProjectMetadata`, `TaskMetadata`, etc.",
    "• Renderer components show real fields, not just `<pre>` JSON dumps",
    "• BlockRendererRegistry can narrow metadata type based on block type"
  ],
  "priority": "high"
}