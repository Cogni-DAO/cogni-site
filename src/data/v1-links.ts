/**
 * Generated by orval v7.9.0 🍺
 * Do not edit manually.
 * Cogni API
 * A minimal FastAPI that directly passes user queries to OpenAI, augmented with Cogni memory.
 * OpenAPI spec version: 0.1.0
 */
import type {
  BlockLink,
  CreateLinkApiV1LinksPostBody,
  CreateLinkApiV1LinksPostParams,
  DeleteLinkApiV1LinksDelete200,
  DeleteLinkApiV1LinksDeleteParams,
  DeleteLinksForBlockApiV1LinksBlockBlockIdDelete200,
  ErrorResponse,
  GetAllLinksApiV1LinksGetParams,
  GetLinksFromApiV1LinksFromBlockIdGetParams,
  GetLinksToApiV1LinksToBlockIdGetParams,
  HTTPValidationError
} from './models';



/**
 * Retrieves all links in the system, with optional filtering by relation type.
 * @summary Get all links
 */
export type getAllLinksApiV1LinksGetResponse200 = {
  data: BlockLink[]
  status: 200
}

export type getAllLinksApiV1LinksGetResponse422 = {
  data: HTTPValidationError
  status: 422
}

export type getAllLinksApiV1LinksGetResponse500 = {
  data: ErrorResponse
  status: 500
}
    
export type getAllLinksApiV1LinksGetResponseComposite = getAllLinksApiV1LinksGetResponse200 | getAllLinksApiV1LinksGetResponse422 | getAllLinksApiV1LinksGetResponse500;
    
export type getAllLinksApiV1LinksGetResponse = getAllLinksApiV1LinksGetResponseComposite & {
  headers: Headers;
}

export const getGetAllLinksApiV1LinksGetUrl = (params?: GetAllLinksApiV1LinksGetParams,) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? 'null' : value.toString())
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0 ? `/api/v1/links?${stringifiedParams}` : `/api/v1/links`
}

export const getAllLinksApiV1LinksGet = async (params?: GetAllLinksApiV1LinksGetParams, options?: RequestInit): Promise<getAllLinksApiV1LinksGetResponse> => {
  
  const res = await fetch(getGetAllLinksApiV1LinksGetUrl(params),
  {      
    ...options,
    method: 'GET'
    
    
  }
)

  const body = [204, 205, 304].includes(res.status) ? null : await res.text()
  const data: getAllLinksApiV1LinksGetResponse['data'] = body ? JSON.parse(body) : {}

  return { data, status: res.status, headers: res.headers } as getAllLinksApiV1LinksGetResponse
}


/**
 * Creates a directed link between two memory blocks with a specified relation type.
 * @summary Create a new link between blocks
 */
export type createLinkApiV1LinksPostResponse201 = {
  data: BlockLink
  status: 201
}

export type createLinkApiV1LinksPostResponse400 = {
  data: ErrorResponse
  status: 400
}

export type createLinkApiV1LinksPostResponse422 = {
  data: HTTPValidationError
  status: 422
}
    
export type createLinkApiV1LinksPostResponseComposite = createLinkApiV1LinksPostResponse201 | createLinkApiV1LinksPostResponse400 | createLinkApiV1LinksPostResponse422;
    
export type createLinkApiV1LinksPostResponse = createLinkApiV1LinksPostResponseComposite & {
  headers: Headers;
}

export const getCreateLinkApiV1LinksPostUrl = (params: CreateLinkApiV1LinksPostParams,) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? 'null' : value.toString())
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0 ? `/api/v1/links?${stringifiedParams}` : `/api/v1/links`
}

export const createLinkApiV1LinksPost = async (createLinkApiV1LinksPostBody: CreateLinkApiV1LinksPostBody,
    params: CreateLinkApiV1LinksPostParams, options?: RequestInit): Promise<createLinkApiV1LinksPostResponse> => {
  
  const res = await fetch(getCreateLinkApiV1LinksPostUrl(params),
  {      
    ...options,
    method: 'POST',
    headers: { 'Content-Type': 'application/json', ...options?.headers },
    body: JSON.stringify(
      createLinkApiV1LinksPostBody,)
  }
)

  const body = [204, 205, 304].includes(res.status) ? null : await res.text()
  const data: createLinkApiV1LinksPostResponse['data'] = body ? JSON.parse(body) : {}

  return { data, status: res.status, headers: res.headers } as createLinkApiV1LinksPostResponse
}


/**
 * Removes a specific link between two memory blocks.
 * @summary Delete a link between blocks
 */
export type deleteLinkApiV1LinksDeleteResponse200 = {
  data: DeleteLinkApiV1LinksDelete200
  status: 200
}

export type deleteLinkApiV1LinksDeleteResponse400 = {
  data: ErrorResponse
  status: 400
}

export type deleteLinkApiV1LinksDeleteResponse422 = {
  data: HTTPValidationError
  status: 422
}
    
export type deleteLinkApiV1LinksDeleteResponseComposite = deleteLinkApiV1LinksDeleteResponse200 | deleteLinkApiV1LinksDeleteResponse400 | deleteLinkApiV1LinksDeleteResponse422;
    
export type deleteLinkApiV1LinksDeleteResponse = deleteLinkApiV1LinksDeleteResponseComposite & {
  headers: Headers;
}

export const getDeleteLinkApiV1LinksDeleteUrl = (params: DeleteLinkApiV1LinksDeleteParams,) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? 'null' : value.toString())
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0 ? `/api/v1/links?${stringifiedParams}` : `/api/v1/links`
}

export const deleteLinkApiV1LinksDelete = async (params: DeleteLinkApiV1LinksDeleteParams, options?: RequestInit): Promise<deleteLinkApiV1LinksDeleteResponse> => {
  
  const res = await fetch(getDeleteLinkApiV1LinksDeleteUrl(params),
  {      
    ...options,
    method: 'DELETE'
    
    
  }
)

  const body = [204, 205, 304].includes(res.status) ? null : await res.text()
  const data: deleteLinkApiV1LinksDeleteResponse['data'] = body ? JSON.parse(body) : {}

  return { data, status: res.status, headers: res.headers } as deleteLinkApiV1LinksDeleteResponse
}


/**
 * Retrieves all links originating from a specific block, with optional filtering.
 * @summary Get links from a block
 */
export type getLinksFromApiV1LinksFromBlockIdGetResponse200 = {
  data: BlockLink[]
  status: 200
}

export type getLinksFromApiV1LinksFromBlockIdGetResponse400 = {
  data: ErrorResponse
  status: 400
}

export type getLinksFromApiV1LinksFromBlockIdGetResponse422 = {
  data: HTTPValidationError
  status: 422
}
    
export type getLinksFromApiV1LinksFromBlockIdGetResponseComposite = getLinksFromApiV1LinksFromBlockIdGetResponse200 | getLinksFromApiV1LinksFromBlockIdGetResponse400 | getLinksFromApiV1LinksFromBlockIdGetResponse422;
    
export type getLinksFromApiV1LinksFromBlockIdGetResponse = getLinksFromApiV1LinksFromBlockIdGetResponseComposite & {
  headers: Headers;
}

export const getGetLinksFromApiV1LinksFromBlockIdGetUrl = (blockId: string,
    params?: GetLinksFromApiV1LinksFromBlockIdGetParams,) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? 'null' : value.toString())
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0 ? `/api/v1/links/from/${blockId}?${stringifiedParams}` : `/api/v1/links/from/${blockId}`
}

export const getLinksFromApiV1LinksFromBlockIdGet = async (blockId: string,
    params?: GetLinksFromApiV1LinksFromBlockIdGetParams, options?: RequestInit): Promise<getLinksFromApiV1LinksFromBlockIdGetResponse> => {
  
  const res = await fetch(getGetLinksFromApiV1LinksFromBlockIdGetUrl(blockId,params),
  {      
    ...options,
    method: 'GET'
    
    
  }
)

  const body = [204, 205, 304].includes(res.status) ? null : await res.text()
  const data: getLinksFromApiV1LinksFromBlockIdGetResponse['data'] = body ? JSON.parse(body) : {}

  return { data, status: res.status, headers: res.headers } as getLinksFromApiV1LinksFromBlockIdGetResponse
}


/**
 * Retrieves all links pointing to a specific block, with optional filtering.
 * @summary Get links to a block
 */
export type getLinksToApiV1LinksToBlockIdGetResponse200 = {
  data: BlockLink[]
  status: 200
}

export type getLinksToApiV1LinksToBlockIdGetResponse400 = {
  data: ErrorResponse
  status: 400
}

export type getLinksToApiV1LinksToBlockIdGetResponse422 = {
  data: HTTPValidationError
  status: 422
}
    
export type getLinksToApiV1LinksToBlockIdGetResponseComposite = getLinksToApiV1LinksToBlockIdGetResponse200 | getLinksToApiV1LinksToBlockIdGetResponse400 | getLinksToApiV1LinksToBlockIdGetResponse422;
    
export type getLinksToApiV1LinksToBlockIdGetResponse = getLinksToApiV1LinksToBlockIdGetResponseComposite & {
  headers: Headers;
}

export const getGetLinksToApiV1LinksToBlockIdGetUrl = (blockId: string,
    params?: GetLinksToApiV1LinksToBlockIdGetParams,) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? 'null' : value.toString())
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0 ? `/api/v1/links/to/${blockId}?${stringifiedParams}` : `/api/v1/links/to/${blockId}`
}

export const getLinksToApiV1LinksToBlockIdGet = async (blockId: string,
    params?: GetLinksToApiV1LinksToBlockIdGetParams, options?: RequestInit): Promise<getLinksToApiV1LinksToBlockIdGetResponse> => {
  
  const res = await fetch(getGetLinksToApiV1LinksToBlockIdGetUrl(blockId,params),
  {      
    ...options,
    method: 'GET'
    
    
  }
)

  const body = [204, 205, 304].includes(res.status) ? null : await res.text()
  const data: getLinksToApiV1LinksToBlockIdGetResponse['data'] = body ? JSON.parse(body) : {}

  return { data, status: res.status, headers: res.headers } as getLinksToApiV1LinksToBlockIdGetResponse
}


/**
 * Removes all links involving a specific block (as source or target).
 * @summary Delete all links for a block
 */
export type deleteLinksForBlockApiV1LinksBlockBlockIdDeleteResponse200 = {
  data: DeleteLinksForBlockApiV1LinksBlockBlockIdDelete200
  status: 200
}

export type deleteLinksForBlockApiV1LinksBlockBlockIdDeleteResponse400 = {
  data: ErrorResponse
  status: 400
}

export type deleteLinksForBlockApiV1LinksBlockBlockIdDeleteResponse422 = {
  data: HTTPValidationError
  status: 422
}
    
export type deleteLinksForBlockApiV1LinksBlockBlockIdDeleteResponseComposite = deleteLinksForBlockApiV1LinksBlockBlockIdDeleteResponse200 | deleteLinksForBlockApiV1LinksBlockBlockIdDeleteResponse400 | deleteLinksForBlockApiV1LinksBlockBlockIdDeleteResponse422;
    
export type deleteLinksForBlockApiV1LinksBlockBlockIdDeleteResponse = deleteLinksForBlockApiV1LinksBlockBlockIdDeleteResponseComposite & {
  headers: Headers;
}

export const getDeleteLinksForBlockApiV1LinksBlockBlockIdDeleteUrl = (blockId: string,) => {


  

  return `/api/v1/links/block/${blockId}`
}

export const deleteLinksForBlockApiV1LinksBlockBlockIdDelete = async (blockId: string, options?: RequestInit): Promise<deleteLinksForBlockApiV1LinksBlockBlockIdDeleteResponse> => {
  
  const res = await fetch(getDeleteLinksForBlockApiV1LinksBlockBlockIdDeleteUrl(blockId),
  {      
    ...options,
    method: 'DELETE'
    
    
  }
)

  const body = [204, 205, 304].includes(res.status) ? null : await res.text()
  const data: deleteLinksForBlockApiV1LinksBlockBlockIdDeleteResponse['data'] = body ? JSON.parse(body) : {}

  return { data, status: res.status, headers: res.headers } as deleteLinksForBlockApiV1LinksBlockBlockIdDeleteResponse
}


