/**
 * Generated by orval v7.9.0 🍺
 * Do not edit manually.
 * Cogni API
 * A minimal FastAPI that directly passes user queries to OpenAI, augmented with Cogni memory.
 * OpenAPI spec version: 0.1.0
 */
import type {
  HTTPValidationError
} from './models';



/**
 * Returns the JSON schema for the given block type and version.
If version is 'latest', resolves to the latest version for the type.
Uses application/schema+json media type.
 * @summary Get JSON schema for a block type and version
 */
export type getSchemaApiV1SchemasBlockTypeVersionGetResponse200 = {
  data: unknown
  status: 200
}

export type getSchemaApiV1SchemasBlockTypeVersionGetResponse422 = {
  data: HTTPValidationError
  status: 422
}
    
export type getSchemaApiV1SchemasBlockTypeVersionGetResponseComposite = getSchemaApiV1SchemasBlockTypeVersionGetResponse200 | getSchemaApiV1SchemasBlockTypeVersionGetResponse422;
    
export type getSchemaApiV1SchemasBlockTypeVersionGetResponse = getSchemaApiV1SchemasBlockTypeVersionGetResponseComposite & {
  headers: Headers;
}

export const getGetSchemaApiV1SchemasBlockTypeVersionGetUrl = (blockType: string,
    version: string,) => {


  

  return `/api/v1/schemas/${blockType}/${version}`
}

export const getSchemaApiV1SchemasBlockTypeVersionGet = async (blockType: string,
    version: string, options?: RequestInit): Promise<getSchemaApiV1SchemasBlockTypeVersionGetResponse> => {
  
  const res = await fetch(getGetSchemaApiV1SchemasBlockTypeVersionGetUrl(blockType,version),
  {      
    ...options,
    method: 'GET'
    
    
  }
)

  const body = [204, 205, 304].includes(res.status) ? null : await res.text()
  const data: getSchemaApiV1SchemasBlockTypeVersionGetResponse['data'] = body ? JSON.parse(body) : {}

  return { data, status: res.status, headers: res.headers } as getSchemaApiV1SchemasBlockTypeVersionGetResponse
}


/**
 * Returns a list of all available block schemas with their type, version, and URL.
 * @summary Get index of all available block schemas
 */
export type getSchemaIndexApiV1SchemasIndexJsonGetResponse200 = {
  data: unknown
  status: 200
}
    
export type getSchemaIndexApiV1SchemasIndexJsonGetResponseComposite = getSchemaIndexApiV1SchemasIndexJsonGetResponse200;
    
export type getSchemaIndexApiV1SchemasIndexJsonGetResponse = getSchemaIndexApiV1SchemasIndexJsonGetResponseComposite & {
  headers: Headers;
}

export const getGetSchemaIndexApiV1SchemasIndexJsonGetUrl = () => {


  

  return `/api/v1/schemas/index.json`
}

export const getSchemaIndexApiV1SchemasIndexJsonGet = async ( options?: RequestInit): Promise<getSchemaIndexApiV1SchemasIndexJsonGetResponse> => {
  
  const res = await fetch(getGetSchemaIndexApiV1SchemasIndexJsonGetUrl(),
  {      
    ...options,
    method: 'GET'
    
    
  }
)

  const body = [204, 205, 304].includes(res.status) ? null : await res.text()
  const data: getSchemaIndexApiV1SchemasIndexJsonGetResponse['data'] = body ? JSON.parse(body) : {}

  return { data, status: res.status, headers: res.headers } as getSchemaIndexApiV1SchemasIndexJsonGetResponse
}


