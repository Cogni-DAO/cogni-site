/**
 * Generated by orval v7.9.0 🍺
 * Do not edit manually.
 * Cogni API
 * A minimal FastAPI that directly passes user queries to OpenAI, augmented with Cogni memory.
 * OpenAPI spec version: 0.1.0
 */
import type {
  CreateMemoryBlockInput,
  ErrorResponse,
  GetAllBlocksApiV1BlocksGetParams,
  GetBlockApiV1BlocksBlockIdGetParams,
  HTTPValidationError,
  MemoryBlock
} from './models';



/**
 * Retrieves memory blocks from specified Dolt branch. Defaults to 'main' branch.
 * @summary Get all memory blocks
 */
export type getAllBlocksApiV1BlocksGetResponse200 = {
  data: MemoryBlock[]
  status: 200
}

export type getAllBlocksApiV1BlocksGetResponse400 = {
  data: ErrorResponse
  status: 400
}

export type getAllBlocksApiV1BlocksGetResponse422 = {
  data: HTTPValidationError
  status: 422
}
    
export type getAllBlocksApiV1BlocksGetResponseComposite = getAllBlocksApiV1BlocksGetResponse200 | getAllBlocksApiV1BlocksGetResponse400 | getAllBlocksApiV1BlocksGetResponse422;
    
export type getAllBlocksApiV1BlocksGetResponse = getAllBlocksApiV1BlocksGetResponseComposite & {
  headers: Headers;
}

export const getGetAllBlocksApiV1BlocksGetUrl = (params?: GetAllBlocksApiV1BlocksGetParams,) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? 'null' : value.toString())
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0 ? `/api/v1/blocks?${stringifiedParams}` : `/api/v1/blocks`
}

export const getAllBlocksApiV1BlocksGet = async (params?: GetAllBlocksApiV1BlocksGetParams, options?: RequestInit): Promise<getAllBlocksApiV1BlocksGetResponse> => {
  
  const res = await fetch(getGetAllBlocksApiV1BlocksGetUrl(params),
  {      
    ...options,
    method: 'GET'
    
    
  }
)

  const body = [204, 205, 304].includes(res.status) ? null : await res.text()
  const data: getAllBlocksApiV1BlocksGetResponse['data'] = body ? JSON.parse(body) : {}

  return { data, status: res.status, headers: res.headers } as getAllBlocksApiV1BlocksGetResponse
}


/**
 * Adds a new memory block to the system using the core creation tool.
 * @summary Create a new memory block
 */
export type createBlockApiV1BlocksPostResponse201 = {
  data: MemoryBlock
  status: 201
}

export type createBlockApiV1BlocksPostResponse422 = {
  data: ErrorResponse
  status: 422
}
    
export type createBlockApiV1BlocksPostResponseComposite = createBlockApiV1BlocksPostResponse201 | createBlockApiV1BlocksPostResponse422;
    
export type createBlockApiV1BlocksPostResponse = createBlockApiV1BlocksPostResponseComposite & {
  headers: Headers;
}

export const getCreateBlockApiV1BlocksPostUrl = () => {


  

  return `/api/v1/blocks`
}

export const createBlockApiV1BlocksPost = async (createMemoryBlockInput: CreateMemoryBlockInput, options?: RequestInit): Promise<createBlockApiV1BlocksPostResponse> => {
  
  const res = await fetch(getCreateBlockApiV1BlocksPostUrl(),
  {      
    ...options,
    method: 'POST',
    headers: { 'Content-Type': 'application/json', ...options?.headers },
    body: JSON.stringify(
      createMemoryBlockInput,)
  }
)

  const body = [204, 205, 304].includes(res.status) ? null : await res.text()
  const data: createBlockApiV1BlocksPostResponse['data'] = body ? JSON.parse(body) : {}

  return { data, status: res.status, headers: res.headers } as createBlockApiV1BlocksPostResponse
}


/**
 * Retrieves a specific memory block by its unique identifier from specified Dolt branch.
 * @summary Get a specific memory block by ID
 */
export type getBlockApiV1BlocksBlockIdGetResponse200 = {
  data: MemoryBlock
  status: 200
}

export type getBlockApiV1BlocksBlockIdGetResponse400 = {
  data: ErrorResponse
  status: 400
}

export type getBlockApiV1BlocksBlockIdGetResponse422 = {
  data: HTTPValidationError
  status: 422
}
    
export type getBlockApiV1BlocksBlockIdGetResponseComposite = getBlockApiV1BlocksBlockIdGetResponse200 | getBlockApiV1BlocksBlockIdGetResponse400 | getBlockApiV1BlocksBlockIdGetResponse422;
    
export type getBlockApiV1BlocksBlockIdGetResponse = getBlockApiV1BlocksBlockIdGetResponseComposite & {
  headers: Headers;
}

export const getGetBlockApiV1BlocksBlockIdGetUrl = (blockId: string,
    params?: GetBlockApiV1BlocksBlockIdGetParams,) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? 'null' : value.toString())
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0 ? `/api/v1/blocks/${blockId}?${stringifiedParams}` : `/api/v1/blocks/${blockId}`
}

export const getBlockApiV1BlocksBlockIdGet = async (blockId: string,
    params?: GetBlockApiV1BlocksBlockIdGetParams, options?: RequestInit): Promise<getBlockApiV1BlocksBlockIdGetResponse> => {
  
  const res = await fetch(getGetBlockApiV1BlocksBlockIdGetUrl(blockId,params),
  {      
    ...options,
    method: 'GET'
    
    
  }
)

  const body = [204, 205, 304].includes(res.status) ? null : await res.text()
  const data: getBlockApiV1BlocksBlockIdGetResponse['data'] = body ? JSON.parse(body) : {}

  return { data, status: res.status, headers: res.headers } as getBlockApiV1BlocksBlockIdGetResponse
}


