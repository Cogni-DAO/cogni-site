/**
 * Generated by orval v7.9.0 🍺
 * Do not edit manually.
 * Cogni API
 * A minimal FastAPI that directly passes user queries to OpenAI, augmented with Cogni memory.
 * OpenAPI spec version: 0.1.0
 */
import type {
  HTTPValidationError
} from './models';



/**
 * Health check endpoint for monitoring.
 * @summary Health Check
 */
export type healthCheckHealthzGetResponse200 = {
  data: unknown
  status: 200
}
    
export type healthCheckHealthzGetResponseComposite = healthCheckHealthzGetResponse200;
    
export type healthCheckHealthzGetResponse = healthCheckHealthzGetResponseComposite & {
  headers: Headers;
}

export const getHealthCheckHealthzGetUrl = () => {


  

  return `/healthz`
}

export const healthCheckHealthzGet = async ( options?: RequestInit): Promise<healthCheckHealthzGetResponse> => {
  
  const res = await fetch(getHealthCheckHealthzGetUrl(),
  {      
    ...options,
    method: 'GET'
    
    
  }
)

  const body = [204, 205, 304].includes(res.status) ? null : await res.text()
  const data: healthCheckHealthzGetResponse['data'] = body ? JSON.parse(body) : {}

  return { data, status: res.status, headers: res.headers } as healthCheckHealthzGetResponse
}


/**
 * Returns the JSON schema for the given block type and version.
If version is 'latest', resolves to the latest version for the type.
 * @summary Get JSON schema for a block type and version
 */
export type getSchemaSchemasBlockTypeVersionGetResponse200 = {
  data: unknown
  status: 200
}

export type getSchemaSchemasBlockTypeVersionGetResponse422 = {
  data: HTTPValidationError
  status: 422
}
    
export type getSchemaSchemasBlockTypeVersionGetResponseComposite = getSchemaSchemasBlockTypeVersionGetResponse200 | getSchemaSchemasBlockTypeVersionGetResponse422;
    
export type getSchemaSchemasBlockTypeVersionGetResponse = getSchemaSchemasBlockTypeVersionGetResponseComposite & {
  headers: Headers;
}

export const getGetSchemaSchemasBlockTypeVersionGetUrl = (blockType: string,
    version: string,) => {


  

  return `/schemas/${blockType}/${version}`
}

export const getSchemaSchemasBlockTypeVersionGet = async (blockType: string,
    version: string, options?: RequestInit): Promise<getSchemaSchemasBlockTypeVersionGetResponse> => {
  
  const res = await fetch(getGetSchemaSchemasBlockTypeVersionGetUrl(blockType,version),
  {      
    ...options,
    method: 'GET'
    
    
  }
)

  const body = [204, 205, 304].includes(res.status) ? null : await res.text()
  const data: getSchemaSchemasBlockTypeVersionGetResponse['data'] = body ? JSON.parse(body) : {}

  return { data, status: res.status, headers: res.headers } as getSchemaSchemasBlockTypeVersionGetResponse
}


/**
 * Returns a list of all available block schemas with their type, version, and URL.
 * @summary Get index of all available block schemas
 */
export type getSchemaIndexSchemasIndexJsonGetResponse200 = {
  data: unknown
  status: 200
}
    
export type getSchemaIndexSchemasIndexJsonGetResponseComposite = getSchemaIndexSchemasIndexJsonGetResponse200;
    
export type getSchemaIndexSchemasIndexJsonGetResponse = getSchemaIndexSchemasIndexJsonGetResponseComposite & {
  headers: Headers;
}

export const getGetSchemaIndexSchemasIndexJsonGetUrl = () => {


  

  return `/schemas/index.json`
}

export const getSchemaIndexSchemasIndexJsonGet = async ( options?: RequestInit): Promise<getSchemaIndexSchemasIndexJsonGetResponse> => {
  
  const res = await fetch(getGetSchemaIndexSchemasIndexJsonGetUrl(),
  {      
    ...options,
    method: 'GET'
    
    
  }
)

  const body = [204, 205, 304].includes(res.status) ? null : await res.text()
  const data: getSchemaIndexSchemasIndexJsonGetResponse['data'] = body ? JSON.parse(body) : {}

  return { data, status: res.status, headers: res.headers } as getSchemaIndexSchemasIndexJsonGetResponse
}


