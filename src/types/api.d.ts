/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
    "/healthz": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Health Check
         * @description Health check endpoint that validates both API and database connectivity.
         *
         *     Tests:
         *     - Memory bank availability in app state
         *     - Database connectivity via direct connection test
         *
         *     Returns detailed status for monitoring.
         */
        get: operations["health_check_healthz_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/refresh": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Refresh Backend Data
         * @description Refresh backend data by pulling latest changes from remote Dolt repository.
         *
         *     This endpoint triggers a Dolt pull operation to synchronize the backend
         *     database with the latest changes from the remote repository.
         *
         *     Returns:
         *         JSON response with pull operation status and details
         */
        post: operations["refresh_backend_data_api_v1_refresh_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/chat": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Stream Chat */
        post: operations["stream_chat_api_v1_chat_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/blocks": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get all memory blocks with branch context
         * @description Retrieves memory blocks from specified Dolt branch with active branch context. Defaults to 'main' branch.
         */
        get: operations["get_all_blocks_api_v1_blocks_get"];
        put?: never;
        /**
         * Create a new memory block
         * @description Adds a new memory block to the system using the core creation tool.
         */
        post: operations["create_block_api_v1_blocks_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/blocks/{block_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get a specific memory block by ID with branch context
         * @description Retrieves a specific memory block by its unique identifier from specified Dolt branch with active branch context.
         */
        get: operations["get_block_api_v1_blocks__block_id__get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/branches": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get all Dolt branches with context
         * @description Retrieves list of all available Dolt branches with their metadata including commit information, status, and active branch context.
         */
        get: operations["get_all_branches_api_v1_branches_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/schemas/{block_type}/{version}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get JSON schema for a block type and version
         * @description Returns the JSON schema for the given block type and version.
         *     If version is 'latest', resolves to the latest version for the type.
         *     Uses application/schema+json media type.
         */
        get: operations["get_schema_api_v1_schemas__block_type___version__get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/schemas/index.json": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get index of all available block schemas
         * @description Returns a list of all available block schemas with their type, version, and URL.
         */
        get: operations["get_schema_index_api_v1_schemas_index_json_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/links": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get all links
         * @description Retrieves all links in the system, with optional filtering by relation type.
         */
        get: operations["get_all_links_api_v1_links_get"];
        put?: never;
        /**
         * Create a new link between blocks
         * @description Creates a directed link between two memory blocks with a specified relation type.
         */
        post: operations["create_link_api_v1_links_post"];
        /**
         * Delete a link between blocks
         * @description Removes a specific link between two memory blocks.
         */
        delete: operations["delete_link_api_v1_links_delete"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/links/from/{block_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get links from a block
         * @description Retrieves all links originating from a specific block, with optional filtering.
         */
        get: operations["get_links_from_api_v1_links_from__block_id__get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/links/to/{block_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get links to a block
         * @description Retrieves all links pointing to a specific block, with optional filtering.
         */
        get: operations["get_links_to_api_v1_links_to__block_id__get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/links/block/{block_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        /**
         * Delete all links for a block
         * @description Removes all links involving a specific block (as source or target).
         */
        delete: operations["delete_links_for_block_api_v1_links_block__block_id__delete"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
}
export type webhooks = Record<string, never>;
export interface components {
    schemas: {
        /**
         * BlockLink
         * @description Defines a directed link between two MemoryBlocks.
         */
        BlockLink: {
            /**
             * To Id
             * @description ID of the target block in the link
             */
            to_id: string;
            /**
             * From Id
             * @description ID of the source block in the link
             */
            from_id: string;
            /**
             * Relation
             * @description The type of relationship between the blocks
             * @enum {string}
             */
            relation: "related_to" | "mentions" | "child_of" | "parent_of" | "duplicate_of" | "part_of" | "contains" | "requires" | "provides" | "owned_by" | "owns" | "subtask_of" | "depends_on" | "blocks" | "is_blocked_by" | "belongs_to_epic" | "epic_contains" | "bug_affects" | "has_bug" | "derived_from" | "supersedes" | "references" | "source_of" | "cited_by";
            /**
             * Priority
             * @description Priority of the link (higher numbers = higher priority)
             * @default 0
             */
            priority: number | null;
            /**
             * Link Metadata
             * @description Additional metadata about the link
             */
            link_metadata?: {
                [key: string]: unknown;
            } | null;
            /**
             * Created By
             * @description ID of the agent/user who created the link
             */
            created_by?: string | null;
            /**
             * Created At
             * Format: date-time
             * @description When the link was created
             */
            created_at?: string;
        };
        /**
         * BlocksResponse
         * @description Enhanced response for blocks endpoints that includes branch context.
         *     Uses proper MemoryBlock typing for frontend TypeScript generation.
         */
        BlocksResponse: {
            /**
             * Active Branch
             * @description Currently active Dolt branch for this operation
             */
            active_branch: string;
            /**
             * Requested Branch
             * @description Branch requested by client (may differ from active_branch for read operations)
             */
            requested_branch?: string | null;
            /**
             * Timestamp
             * @description UTC ISO timestamp when the operation was performed
             */
            timestamp: string;
            /**
             * Blocks
             * @description List of memory blocks from the requested branch
             */
            blocks: components["schemas"]["MemoryBlock"][];
            /**
             * Total Count
             * @description Total number of blocks returned
             */
            total_count: number;
            /**
             * Filters Applied
             * @description Summary of filters applied (type, case_insensitive, etc.)
             */
            filters_applied?: {
                [key: string]: unknown;
            } | null;
        };
        /**
         * BranchesResponse
         * @description Enhanced response for branches endpoint that includes current context.
         *     Uses proper DoltBranchInfo typing for frontend TypeScript generation.
         */
        BranchesResponse: {
            /**
             * Active Branch
             * @description Currently active Dolt branch for this operation
             */
            active_branch: string;
            /**
             * Requested Branch
             * @description Branch requested by client (may differ from active_branch for read operations)
             */
            requested_branch?: string | null;
            /**
             * Timestamp
             * @description UTC ISO timestamp when the operation was performed
             */
            timestamp: string;
            /**
             * Branches
             * @description List of all available Dolt branches with metadata
             */
            branches: components["schemas"]["DoltBranchInfo"][];
            /**
             * Total Branches
             * @description Total number of branches available
             */
            total_branches: number;
        };
        /**
         * CompleteQueryRequest
         * @description Extended schema for a chat request with additional parameters.
         *     This can be used for more advanced chat endpoints.
         */
        CompleteQueryRequest: {
            /**
             * Message
             * @description The message content to send to the AI
             */
            message: string;
            /**
             * Model
             * @description The AI model to use for generation
             * @default gpt-3.5-turbo
             */
            model: string;
            /**
             * Temperature
             * @description Controls randomness in the response. Lower is more deterministic.
             * @default 0.7
             */
            temperature: number;
            /**
             * System Message
             * @description Instructions for the AI assistant's behavior
             * @default You are a helpful AI assistant.
             */
            system_message: string | null;
            /**
             * Message History
             * @description Optional list of previous messages in the conversation
             */
            message_history?: components["schemas"]["HistoryMessage"][] | null;
        };
        /**
         * ConfidenceScore
         * @description Represents confidence scores, potentially from human or AI sources.
         */
        ConfidenceScore: {
            /**
             * Human
             * @description Optional human confidence score (0.0 to 1.0)
             */
            human?: number | null;
            /**
             * Ai
             * @description Optional AI-generated confidence score (0.0 to 1.0)
             */
            ai?: number | null;
        };
        /**
         * CreateMemoryBlockInput
         * @description Input model for creating a new memory block.
         */
        CreateMemoryBlockInput: {
            /**
             * Type
             * @description Type of memory block to create (must be registered in schema registry)
             */
            type: string;
            /**
             * Text
             * @description Primary content of the memory block
             */
            text: string;
            /**
             * State
             * @description Initial state of the block
             * @default draft
             */
            state: ("draft" | "published" | "archived") | null;
            /**
             * Visibility
             * @description Visibility level of the block
             * @default internal
             */
            visibility: ("internal" | "public" | "restricted") | null;
            /**
             * Tags
             * @description Optional tags for filtering and metadata
             */
            tags?: string[];
            /**
             * Metadata
             * @description Type-specific metadata for the block
             */
            metadata?: {
                [key: string]: unknown;
            };
            /**
             * Source File
             * @description Optional source file or markdown name
             */
            source_file?: string | null;
            /** @description Optional confidence scores for the block */
            confidence?: components["schemas"]["ConfidenceScore"] | null;
            /**
             * Created By
             * @description Optional identifier for creator (agent name or user ID)
             * @default agent
             */
            created_by: string | null;
        };
        /**
         * DoltBranchInfo
         * @description Information about a single Dolt branch.
         */
        DoltBranchInfo: {
            /**
             * Name
             * @description Branch name
             */
            name: string;
            /**
             * Hash
             * @description Latest commit hash
             */
            hash: string;
            /**
             * Latest Committer
             * @description Name of the latest committer
             */
            latest_committer: string;
            /**
             * Latest Committer Email
             * @description Email of the latest committer
             */
            latest_committer_email: string;
            /**
             * Latest Commit Date
             * Format: date-time
             * @description Date of the latest commit
             */
            latest_commit_date: string;
            /**
             * Latest Commit Message
             * @description Message of the latest commit
             */
            latest_commit_message: string;
            /**
             * Remote
             * @description Remote name (empty if local)
             */
            remote: string;
            /**
             * Branch
             * @description Remote branch name (empty if local)
             */
            branch: string;
            /**
             * Dirty
             * @description Whether the branch has uncommitted changes
             */
            dirty: boolean;
        };
        /**
         * ErrorResponse
         * @description Schema for error responses.
         */
        ErrorResponse: {
            /**
             * Detail
             * @description A human-readable error message
             */
            detail: string;
            /**
             * Code
             * @description An optional error code for programmatic handling
             */
            code?: string | null;
        };
        /** HTTPValidationError */
        HTTPValidationError: {
            /** Detail */
            detail?: components["schemas"]["ValidationError"][];
        };
        /**
         * HistoryMessage
         * @description Schema for a single message in the chat history.
         */
        HistoryMessage: {
            /**
             * Role
             * @description The role of the message sender.
             * @enum {string}
             */
            role: "user" | "assistant" | "system";
            /**
             * Content
             * @description The content of the message.
             */
            content: string;
        };
        /**
         * MemoryBlock
         * @description The primary data structure for representing a unit of memory in the Cogni system experiment.
         *     Aligns with the design specified in project-CogniMemorySystem-POC.json.
         *     Includes schema versioning support (Task 2.0).
         *
         *     NOTE: As of Property-Schema Split implementation, metadata is stored in the
         *     block_properties table rather than as a JSON field on this model.
         */
        MemoryBlock: {
            /**
             * Id
             * @description Globally unique ID for this memory block
             */
            id?: string;
            /**
             * Type
             * @description Block type used to determine structure and relationships
             * @enum {string}
             */
            type: "knowledge" | "task" | "project" | "doc" | "interaction" | "log" | "epic" | "bug";
            /**
             * Schema Version
             * @description Version of the schema this block adheres to (links to node_schemas table)
             */
            schema_version?: number | null;
            /**
             * Text
             * @description Primary content or description of the block
             */
            text: string;
            /**
             * State
             * @description Current state of the block
             */
            state?: ("draft" | "published" | "archived") | null;
            /**
             * Visibility
             * @description Visibility level of the block
             */
            visibility?: ("internal" | "public" | "restricted") | null;
            /**
             * Block Version
             * @description Version number of this block
             */
            block_version?: number | null;
            /**
             * Parent Id
             * @description ID of the parent block in the hierarchy (foreign key to memory_blocks.id)
             */
            parent_id?: string | null;
            /**
             * Has Children
             * @description Whether this block has child blocks (denormalized for fast lookups)
             * @default false
             */
            has_children: boolean;
            /**
             * Tags
             * @description Optional tags for filtering, theming, or metadata
             */
            tags?: string[];
            /**
             * Metadata
             * @description Custom metadata based on block type (reconstructed from block_properties)
             */
            metadata?: {
                [key: string]: unknown;
            };
            /**
             * Source File
             * @description Optional source markdown or file name
             */
            source_file?: string | null;
            /**
             * Source Uri
             * @description Optional source link or Logseq block URI
             */
            source_uri?: string | null;
            /** @description Confidence scores for this memory block */
            confidence?: components["schemas"]["ConfidenceScore"] | null;
            /**
             * Created By
             * @description Optional identifier for creator (agent name or user ID)
             */
            created_by?: string | null;
            /**
             * Created At
             * Format: date-time
             * @description ISO timestamp of block creation
             */
            created_at?: string;
            /**
             * Updated At
             * Format: date-time
             * @description ISO timestamp of last update
             */
            updated_at?: string;
            /**
             * Embedding
             * @description Optional vector embedding of the block's content
             */
            embedding?: number[] | null;
        };
        /**
         * SingleBlockResponse
         * @description Enhanced response for single block retrieval with branch context.
         *     Uses proper MemoryBlock typing for frontend TypeScript generation.
         */
        SingleBlockResponse: {
            /**
             * Active Branch
             * @description Currently active Dolt branch for this operation
             */
            active_branch: string;
            /**
             * Requested Branch
             * @description Branch requested by client (may differ from active_branch for read operations)
             */
            requested_branch?: string | null;
            /**
             * Timestamp
             * @description UTC ISO timestamp when the operation was performed
             */
            timestamp: string;
            /** @description The requested memory block */
            block: components["schemas"]["MemoryBlock"];
        };
        /** ValidationError */
        ValidationError: {
            /** Location */
            loc: (string | number)[];
            /** Message */
            msg: string;
            /** Error Type */
            type: string;
        };
    };
    responses: never;
    parameters: never;
    requestBodies: never;
    headers: never;
    pathItems: never;
}
export type $defs = Record<string, never>;
export interface operations {
    health_check_healthz_get: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
        };
    };
    refresh_backend_data_api_v1_refresh_post: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
        };
    };
    stream_chat_api_v1_chat_post: {
        parameters: {
            query?: never;
            header: {
                authorization: string;
            };
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["CompleteQueryRequest"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    get_all_blocks_api_v1_blocks_get: {
        parameters: {
            query?: {
                /** @description Filter by block type (e.g., 'project', 'knowledge', 'task') */
                type?: string;
                /** @description Case-insensitive type filtering */
                case_insensitive?: boolean;
                /** @description Dolt branch to read from (default: 'main') */
                branch?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["BlocksResponse"];
                };
            };
            /** @description Invalid branch name format */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
            /** @description Branch not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
    create_block_api_v1_blocks_post: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["CreateMemoryBlockInput"];
            };
        };
        responses: {
            /** @description Successful Response */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MemoryBlock"];
                };
            };
            /** @description Validation Error (invalid input data or metadata) */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
            /** @description Internal server error (failed to save or fetch) */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
    get_block_api_v1_blocks__block_id__get: {
        parameters: {
            query?: {
                /** @description Dolt branch to read from (default: 'main') */
                branch?: string;
            };
            header?: never;
            path: {
                block_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["SingleBlockResponse"];
                };
            };
            /** @description Invalid branch name format */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
            /** @description Memory block or branch not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
    get_all_branches_api_v1_branches_get: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["BranchesResponse"];
                };
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
    get_schema_api_v1_schemas__block_type___version__get: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                block_type: string;
                version: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    get_schema_index_api_v1_schemas_index_json_get: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
        };
    };
    get_all_links_api_v1_links_get: {
        parameters: {
            query?: {
                relation?: ("related_to" | "mentions" | "child_of" | "parent_of" | "duplicate_of" | "part_of" | "contains" | "requires" | "provides" | "owned_by" | "owns" | "subtask_of" | "depends_on" | "blocks" | "is_blocked_by" | "belongs_to_epic" | "epic_contains" | "bug_affects" | "has_bug" | "derived_from" | "supersedes" | "references" | "source_of" | "cited_by") | null;
                limit?: number;
                cursor?: string | null;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["BlockLink"][];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
    create_link_api_v1_links_post: {
        parameters: {
            query: {
                from_id: string;
                to_id: string;
                relation: "related_to" | "mentions" | "child_of" | "parent_of" | "duplicate_of" | "part_of" | "contains" | "requires" | "provides" | "owned_by" | "owns" | "subtask_of" | "depends_on" | "blocks" | "is_blocked_by" | "belongs_to_epic" | "epic_contains" | "bug_affects" | "has_bug" | "derived_from" | "supersedes" | "references" | "source_of" | "cited_by";
                priority?: number;
                created_by?: string | null;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": {
                    [key: string]: unknown;
                } | null;
            };
        };
        responses: {
            /** @description Successful Response */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["BlockLink"];
                };
            };
            /** @description Bad Request - Invalid parameters or validation error */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
            /** @description Conflict - Concurrency issue or link already exists */
            409: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
    delete_link_api_v1_links_delete: {
        parameters: {
            query: {
                from_id: string;
                to_id: string;
                relation: "related_to" | "mentions" | "child_of" | "parent_of" | "duplicate_of" | "part_of" | "contains" | "requires" | "provides" | "owned_by" | "owns" | "subtask_of" | "depends_on" | "blocks" | "is_blocked_by" | "belongs_to_epic" | "epic_contains" | "bug_affects" | "has_bug" | "derived_from" | "supersedes" | "references" | "source_of" | "cited_by";
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        [key: string]: unknown;
                    };
                };
            };
            /** @description Bad Request - Invalid parameters */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
            /** @description Not Found - Link does not exist */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
    get_links_from_api_v1_links_from__block_id__get: {
        parameters: {
            query?: {
                relation?: ("related_to" | "mentions" | "child_of" | "parent_of" | "duplicate_of" | "part_of" | "contains" | "requires" | "provides" | "owned_by" | "owns" | "subtask_of" | "depends_on" | "blocks" | "is_blocked_by" | "belongs_to_epic" | "epic_contains" | "bug_affects" | "has_bug" | "derived_from" | "supersedes" | "references" | "source_of" | "cited_by") | null;
                depth?: number | null;
                direction?: string | null;
                limit?: number;
                cursor?: string | null;
            };
            header?: never;
            path: {
                block_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["BlockLink"][];
                };
            };
            /** @description Bad Request - Invalid parameters */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
    get_links_to_api_v1_links_to__block_id__get: {
        parameters: {
            query?: {
                relation?: ("related_to" | "mentions" | "child_of" | "parent_of" | "duplicate_of" | "part_of" | "contains" | "requires" | "provides" | "owned_by" | "owns" | "subtask_of" | "depends_on" | "blocks" | "is_blocked_by" | "belongs_to_epic" | "epic_contains" | "bug_affects" | "has_bug" | "derived_from" | "supersedes" | "references" | "source_of" | "cited_by") | null;
                depth?: number | null;
                direction?: string | null;
                limit?: number;
                cursor?: string | null;
            };
            header?: never;
            path: {
                block_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["BlockLink"][];
                };
            };
            /** @description Bad Request - Invalid parameters */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
    delete_links_for_block_api_v1_links_block__block_id__delete: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                block_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        [key: string]: unknown;
                    };
                };
            };
            /** @description Bad Request - Invalid parameters */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
}
